const char * lightingFragmentShader = 
"uniform sampler2D DiffuseTexture; \n"
"uniform sampler2D NormalTexture; \n"
"uniform sampler2D SpecularTexture; \n"
"uniform mat4 ObjectMatrix; \n"
"uniform mat4 ViewMatrix; \n"
"uniform mat4 ProjectionMatrix; \n"
"uniform float Lights[4*((4*3)+1)]; \n"
"varying vec2 OutTexCoord; \n"
"varying vec3 lightVertexPos; \n"
"varying vec3 lightVertexNormal; \n"
"void main(void) \n"
"{ \n"
"	vec4 fragColour = vec4(0.0, 0.0, 0.0, 0.0); \n"
"	int numLightFloats = 4*((4*3)+1);	\n"
"	for (int i = 0; i < numLightFloats; i += (4*3)+1) \n"
"	{ \n"
"		float lightWeight = Lights[i];	\n"
"		vec4 lightPos = vec4(Lights[i+1], Lights[i+2], Lights[i+3], 1.0); \n"
"		vec3 lightAmbient = vec3(Lights[i+4], Lights[i+5], Lights[i+6]); \n"
"		vec3 lightDiffuse = vec3(Lights[i+7], Lights[i+8], Lights[i+9]); \n"
"		vec3 lightSpecular = vec3(Lights[i+10], Lights[i+11], Lights[i+12]); \n"
" \n"
"		vec3 Iamb = lightAmbient * gl_FrontMaterial.ambient.xyz * lightWeight; \n"
" \n"
"		vec4 vertexLight = normalize(vec4(lightVertexPos, 1.0));	\n"
"		vec4 lightDirection = normalize(lightPos - vertexLight);	\n"
"		vec3 Idiff = lightDiffuse * gl_FrontMaterial.diffuse.xyz * max(dot(vertexLight, lightDirection), 0.0) * lightWeight; \n"
" \n"
"		vec3 camPos = inverse(transpose(ViewMatrix))[3]; \n"
"		vec3 cameraDirection = normalize(vertexLight - camPos); \n"
"		vec4 specMap = texture2D(SpecularTexture, OutTexCoord); \n"
"		vec3 Ispec = lightSpecular * gl_FrontMaterial.specular.xyz * pow(max(dot(vertexLight, reflect(cameraDirection, lightDirection.xyz)), 0.0), 1.0 - (gl_FrontMaterial.shininess/1024)) * lightWeight; \n"
"		Ispec = Ispec * (specMap.xyz); \n"
" \n"
"		vec4 texFrag = texture2D(DiffuseTexture, OutTexCoord); \n"
"		fragColour += texFrag * vec4((Iamb + Idiff + Ispec), texFrag.a); \n"
"	} \n"
"	gl_FragColor = fragColour; \n"
" } \n";