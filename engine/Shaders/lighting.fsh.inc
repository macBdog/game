const char * lightingFragmentShader = 
"uniform sampler2D Texture0; \n"
"uniform float Time; \n"
"uniform float Lights[4*4*3]; \n"
"varying vec2 OutTexCoord; \n"
"varying vec3 lightVertexPos; \n"
"varying vec3 lightVertexNormal; \n"
"void main(void) \n"
"{ \n"
"	vec4 fragColour = vec4(0.0, 0.0, 0.0, 0.0); \n"
"	for (int i = 0; i < 4*4*3; i += 4*3) \n"
"	{ \n"
"		vec4 lightPos = vec4(Lights[i], Lights[i+1], Lights[i+2], 1.0); \n"
"		vec3 lightAmbient = vec3(Lights[i+3], Lights[i+4], Lights[i+5]); \n"
"		vec3 lightDiffuse = vec3(Lights[i+6], Lights[i+7], Lights[i+8]); \n"
"		vec3 lightSpecular = vec3(Lights[i+9], Lights[i+10], Lights[i+11]); \n"
" \n"
"		vec3 Iamb = lightAmbient * gl_FrontMaterial.ambient.xyz; \n"
" \n"
"		vec4 vertexLight = normalize(vec4(lightVertexPos, 1.0));	\n"
"		vec4 lightDirection = normalize(lightPos - vertexLight);	\n"
"		vec3 Idiff = lightDiffuse * gl_FrontMaterial.diffuse.xyz * max(dot(vertexLight, lightDirection), 0.0); \n"
" \n"
"		vec3 E = normalize(-vertexLight); \n"
"		vec3 R = normalize(-reflect(vertexLight, lightVertexNormal));   \n"
"		vec3 Ispec = lightSpecular * gl_FrontMaterial.specular.xyz * pow(max(dot(R, E), 0.0), 1.0 - (gl_FrontMaterial.shininess/1024)); \n"
"		Ispec = clamp(Ispec, 0.0, 1.0);  \n"
" \n"
"		vec4 texFrag = texture2D(Texture0, OutTexCoord); \n"
"		fragColour += texFrag * vec4((Iamb + Idiff + Ispec), texFrag.a); \n"
"		break; \n"
"	} \n"
"	gl_FragColor = fragColour; \n"
" } \n";