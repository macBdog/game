-- This part remaps the require function so it can work from a released DataPack
local localFileSystemRequire = require
function require (module)
  local ok, m = pcall (localFileSystemRequire, module)
  if ok then return m end
  DataPackRequire(module)
end

function Startup()
	io.write("Game started.\n")

	-- Initialise the game components here
	
	-- Main game loop
	while Update() do
		Yield()
	end

	Shutdown()
end

function Update()
	-- Update game logic here
	return true
end

function Shutdown()
	io.write("Game shutdown.\n")
end

Startup()

--[[ Engine Reference follows

Global Functions
----------------
dt = GetFrameDelta()
SetCameraPosition(x, y, z)
SetCameraRotation(x, y, z)
SetCameraFOV(f)
SetCameraTarget(x, y, z)
MoveCamera(x, y, z)
RotateCamera(x, y, z)
NewScene("newSceneName")
SetScene("existingSceneName")
SetLightAmbient(indexOfLightToModify, r, g, b, a)
SetLightDiffuse(indexOfLightToModify, r, g, b, a)
SetLightSpecular(indexOfLightToModify, r, g, b, a)
SetLightPosition(indexOfLightToModify, x, y, z)
bool = IsVR()
bool = IsKeyDown(keyCodes.character)
bool = IsGamePadConnected(padId) -- First gamepad ID is 0
bool = IsGamePadButtonDown(padId, buttonId)
bool = IsMouseLeftButtonDown()
bool = IsMouseRightButtonDown()
x,y = GetGamePadLeftStick(padId)
x,y = GetGamePadRightStick(padId)
f = GetGamePadLeftTrigger(padId)
f = GetGamePadRightTrigger(padId)
rayHitX, rayHitY, rayHitZ, rayNormX, rayNormY, rayNormZ, hitGameObj = GetRayCollision(rayStartX, rayStartY, rayStaryZ, rayEndX, rayEndZ, rayEndZ)
PlaySound("fileNameInSoundFolder.wav")
PlayMusic("loopingFileNameInSoundFolder.wav")
SetMusicVolume("fileNameOfMusicThatsPlayer", 0.5)
StopAllSoundsAndMusic()

Debugging
---------
DebugPrint("A string to be displayed in a box on screen for one frame")
DebugLog("A string to be printed into the log")
DebugLine(x1, y1, z1, x2, y2, z2)
DebugPoint(x, y, z, r, g, b)


GUI Functions
-------------
GUI:SetValue("widgetName", "value")
string = GUI:GetValue("widgetName")
GUI:SetFont("fontNameFromFntFile")
GUI:SetFontSize(1.5)
GUI:SetColour("widgetName", 1.0, 1.0, 1.0, 1.0)
GUI:Show("widgetName")
GUI:Hide("widgetName")
GUI:SetColour("widgetName")
GUI:Activate("widgetName")
string = GUI:GetSelected()
GUI:SetSelected("widgetName")
GUI:SetActiveMenu("MenuName")
GUI:EnableMouse()
GUI:DisableMouse()
mousePosClipSpaceX, mousePosClipSpaceY = GUI:GetMouseClipPosition()
mousePosPixelsX, mousePosPixelsY = GUI:GetMouseScreenPosition()
mouseDirX, mouseDirY = GUI:GetMouseDirection()

GameObject Functions
--------------------
obj = GameObject:Create("templateName")
i = myGameObject:GetId()
string = myGameObject:GetName()
myGameObject:SetName("New Name")
x,y,z = myGameObject:GetPosition()
myGameObject:SetPosition(x, y, z)
x,y,z = myGameObject:GetRotation()
myGameObject:SetRotation(x, y, z)
f = myGameObject:GetScale()
myGameObject:SetScale(x, y, z)
f = myGameObject:GetLifeTime()
myGameObject:SetLifeTime(newLifeTime)
myGameObject:SetSleeping()
myGameObject:SetActive()
bool = myGameObject:IsSleeping()
bool = myGameObject:IsActive()
myGameObject:SetDiffuseTexture("fileInTexDir.tga")
myGameObject:SetNormalTexture("fileInTexDir.tga")
myGameObject:SetSpecularTexture("fileInTexDir.tga")
myGameObject:EnableCollision()
myGameObject:DisableCollision()
myGameObject:AddToPhysicsWorld()
myGameObject:ApplyPhysicsForce(forceX, forceY, forceZ)
velX, velY, velZ = myGameObject:GetVelocity()
bool = myGameObject:HasCollisions()
{} = myGameObject:GetCollisions()
myGameObject:PlayAnimation("AnimationName")
myGameObject:Destroy()

Render Functions
----------------
Render:SetShader("ShaderName")
Render:SetShaderData(r, g, b, a)
Render:Quad(topLeft, topRight, bottomRight, bottomLeft, "textureName")
Render:Tri(point)

GameSettings.cfg Reference
--------------------------

render
{
  textureFilter: true
  vr: false
}
collision
{
	groups
	{
		group1: player
		group2: enemies
		group3: terrain
	}
	filters
	{
		player: terrain, enemies
		enemies: terrain, player
		terrain: player, enemies
	}
}
physics
{
  gravity: 0, 0, -10
}

Scene Reference
---------------

scene
{
	name: game
	beginLoaded: true
	lighting
	{
		light
		{
			name: sun
			pos: 0.000000, 0.000000, 10.146891
			dir: 0.000000, 0.000000, 0.000000, 1.000000
			ambient: 0.250000, 0.250000, 0.250000, 1.000000
			diffuse: 1.000000, 1.000000, 1.000000, 1.000000
			specular: 0.500000, 0.500000, 0.500000, 1.000000
		}
	}
}

Template Reference
------------------

gameObject
{
  name: playerBall
  model: player_ball.obj
  clipType: player_ball.bullet
  clipGroup: player
  physics: true
  physicsMass: 15
}



Other Notes
-----------
Blender export settings: Apply modifiers, Include edges, Write normals, Include UVs, Write Materials, Triangulate Faces, Objects as OBJ, Objects as OBJ Groups, Y Forward, Z Up
Python script to export bullet collision (must run while Blender Game is running and while Blender has write access as administrator):

import PhysicsConstraints;
PhysicsConstraints.exportBulletFile("c:/block_terrain1.bullet")

]]